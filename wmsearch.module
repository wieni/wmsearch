<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\wmsearch\Exception\ApiException;
use Drupal\wmsearch\Entity\Document\DocumentInterface;
use Drupal\Core\TypedData\TranslatableInterface;
use Drush\Drush;

/**
 * Queue entities to be added/removed to/from the index.
 */
function wmsearch_queue(EntityInterface $e, $allTranslations = false)
{
    if (!$e instanceof DocumentInterface) {
        return;
    }

    $languages = [$e->language()];
    if (
        $allTranslations
        && $e instanceof TranslatableInterface
        && ($_languages = $e->getTranslationLanguages())
        && !empty($_languages)
    ) {
        $languages = $_languages;
    }

    foreach ($languages as $language) {
        $translation = $e->getTranslation($language->getId());
        if (!$translation) {
            continue;
        }

        $types = [];
        foreach ($translation->getElasticTypes() as $docType) {
            $types[$docType] = $translation->getElasticId($docType);
        }

        \Drupal::service('queue')
            ->get('wmsearch.index')
            ->createItem(
                [
                    'type' => $translation->getEntityTypeId(),
                    'language' => $language->getId(),
                    'id' => $translation->id(),
                    'types' => $types,
                ]
            );
    }
}

function wmsearch_entity_delete(EntityInterface $e)
{
    wmsearch_queue($e, true);
}

function wmsearch_entity_translation_delete(EntityInterface $e)
{
    wmsearch_queue($e);
}

function wmsearch_entity_update(EntityInterface $e)
{
    wmsearch_queue($e, true);
}

function wmsearch_entity_translation_update(EntityInterface $e)
{
    wmsearch_queue($e);
}

function wmsearch_entity_insert(EntityInterface $e)
{
    wmsearch_queue($e, true);
}

function wmsearch_entity_translation_insert(EntityInterface $e)
{
    wmsearch_queue($e);
}

function wmsearch_entity_id(EntityInterface $e)
{
    $id = $e->id();
    if (!$id) {
        throw new \RuntimeException(
            'Can not retrieve the elastic id for an entity without id'
        );
    }

    return wmsearch_id(
        $e->getEntityTypeId(),
        $e->language()->getId(),
        $id
    );
}

function wmsearch_id($type, $language, $id)
{
    return sprintf('%s:%s:%s', $type, $language, $id);
}

function wmsearch_rebuild()
{
    try {
        \Drupal::service('wmsearch.api.index')->createIndex(false);
    } catch (ApiException $e) {
        \Drupal::logger('wmsearch')->error($e->getMessage());
    }
}

function wmsearch_cron()
{
    $state = Drupal::state();
    $api = Drupal::getContainer()->get('wmsearch.api.index');
    $synonyms = $state->get('wmsearch.synonyms');

    if (!$state->get('wmsearch.synonymsChanged', false)) {
        return;
    }

    $api->createIndex(true);
    $state->delete('wmsearch.synonymsChanged');

    if ($synonyms) {
        $message = 'Successfully added synonyms to Elastic mapping.';
    } else {
        $message = 'Successfully removed synonyms from Elastic mapping.';
    }

    if (Drush::hasContainer()) {
        Drush::logger()->info($message);
    } else {
        Drupal::logger('wmsearch')->info($message);
        Drupal::messenger()->addMessage($message);
    }
}

